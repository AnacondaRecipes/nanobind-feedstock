{% set name = "nanobind" %}
{% set version = "2.5.0" %}
{% set abi_version = 15 %}

package:
  name: {{ name|lower }}-split
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: cc8412e94acffa20a369191382bcdbb6fbfb302e475e87cacff9516d51023a15
  patches:  # [osx]
    - patches/0001-fix-undefined-symbols-on-osx.patch  # [osx]

build:
  number: 1

outputs:
  - name: nanobind-abi
    version: {{ abi_version }}
    build:
      noarch: generic
      run_exports:
        - nanobind-abi =={{ abi_version }}
    test:
      source_files:
        - src/nb_internals.cpp
      commands:
        # make sure the internals version matches the package version
        - if [ $(grep "define NB_INTERNALS_VERSION" src/nb_internals.cpp | grep -E -o '[0-9]+') != "{{ abi_version }}" ]; then exit 1; fi

  - name: nanobind
    build:
      noarch: python
      script: $PYTHON -m pip install . -vv --no-deps --no-build-isolation  # [not win]
      script: %PYTHON% -m pip install . -vv --no-deps --no-build-isolation  # [win]
    requirements:
      build:
        - patch  # [osx]
        - cmake
        - make  # [linux]
      host:
        - pip
        - python
        - wheel
        - setuptools
        - scikit-build-core >=0.10
      run:
        - python
      run_constrained:
        - nanobind-abi =={{ abi_version }}
    # The pytests are disabled. _ext files missed. Example:
    # test_chrono_ext -> https://github.com/wjakob/nanobind/blob/v2.5.0/tests/test_chrono.py#L3
    test:
      imports:
        - nanobind
      commands:
        - pip check
        - python -c "import nanobind; import os; assert os.path.isdir(nanobind.cmake_dir()) and os.path.isdir(nanobind.include_dir())"
      requires:
        - pip
        - pytest

about:
  home: https://github.com/wjakob/nanobind
  summary: Seamless operability between C++17 and Python
  description: |
    nanobind is a small binding library that exposes C++ types in Python and
    vice versa. It is reminiscent of Boost.Python and pybind11 and uses
    near-identical syntax. In contrast to these existing tools, nanobind is
    more efficient: bindings compile in a shorter amount of time, producing
    smaller binaries with better runtime performance.
  license: BSD-3-Clause
  license_family: BSD
  license_file:
    - LICENSE
    - ext/robin_map/LICENSE
  doc_url: https://github.com/wjakob/nanobind/tree/master/docs
  dev_url: https://github.com/wjakob/nanobind

extra:
  recipe-maintainers:
    - snegireff
